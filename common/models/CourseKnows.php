<?php

namespace common\models;

use frontend\models\Video;
use Yii;

/**
 * This is the model class for table "{{%course_knows}}".
 *
 * @property integer $knowsid
 * @property string $name
 * @property integer $barsid
 * @property integer $type
 * @property integer $linkid
 * @property integer $order
 */
class CourseKnows extends \yii\db\ActiveRecord
{
    const TYPE_VIDEO = 1;//视频

    public $courseid;
    public $sectionid;

    public $items = null;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%course_knows}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['barsid', 'type', 'linkid', ], 'integer'],
            [['type', 'linkid', 'name'], 'required'],
            [['name'], 'string', 'max' => 120],
            [['order'], 'integer'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'knowsid' => '知识点ID',
            'name' => '知识点名称',
            'barsid' => '小节ID',
            'type' => '知识点类型',
            'linkid' => '关联ID',
            'order' => '排序',
        ];
    }

    /**
     * 获取关联数据
     * @param mixed $condition
     * @return null|static
     */
    public static function findOne($condition)
    {
        $model = parent::findOne($condition); // TODO: Change the autogenerated stub
        if ($model !== null)
        {
            if ($model->type == self::TYPE_VIDEO)
            {
                $model->items = Video::findOne($model->linkid);
            }
        }
        return $model;
    }

    /**
     * x下拉数据
     * @param $column
     * @param null $value
     * @return mixed
     */
    public static function dropDown($column, $value = null)
    {
        $dropDownList = [
            'type' => [
                self::TYPE_VIDEO => '视频'
            ],
        ];
        return !is_null($value) ? $dropDownList[$column][$value] : $dropDownList[$column];
    }


    /**
     * 删除视频数据
     * @throws \Exception
     * @throws \yii\db\Exception
     */
    public function delete()
    {
        $transaction = Yii::$app->db->beginTransaction();
        try {
            if(parent::delete())
            {
                $transaction->commit();
                $courseModel = Course::findOne($this->courseid);
                $courseModel->count_knows_num = intval($courseModel->count_knows_num) - 1;
                $courseModel->save();
            } else {
                $transaction->rollback();
            }
        }  catch(Exception $e) {
            $transaction->rollback();
        }
    }

    /**
     * 获取关联的视频信息
     * @return \yii\db\ActiveQuery
     */
    public function getVideo()
    {
        return $this->hasOne(Video::className(), ['videoid'=> 'linkid']);
    }

    /**
     * 获取小节信息
     * @return \yii\db\ActiveQuery
     */
    public function getCourseBars()
    {
        return $this->hasOne(CourseBars::className(), ['barsid'=>'barsid']);
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        $isNewRecord = $this->isNewRecord;
        $bool = parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
        if ($isNewRecord)
        {
            $courseModel = Course::findOne($this->courseid);
            $courseModel->count_knows_num = intval($courseModel->count_knows_num) + 1;
            $courseModel->save();
//            var_dump($courseModel->getErrors());exit;
        }
        return $bool;
    }
}
