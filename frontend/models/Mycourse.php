<?php
/**
 * Created by PhpStorm.
 * User: IUOD
 * Date: 2016/7/30
 * Time: 12:19
 */

namespace frontend\models;

use common\models\CourseSections;
use common\models\Goods;
use Yii;
use common\models\Mycourse as ComMycourse;

class Mycourse extends ComMycourse
{
    public $pagesize;

    public $page;


    public function save($runValidation = true, $attributeNames = null)
    {
        $this->userid = Yii::$app->user->id;
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function search($params)
    {
        $this->pagesize = isset($params['pagesize']) ? intval($params['pagesize']) : 10;
        $this->page = isset($params['page']) ? intval($params['page']) : 1;

        $query = self::find()->alias('a')
            ->where(['a.userid'=>Yii::$app->user->id]);

        $query->innerJoinWith(['course b']);

        $totalCount = $query->count();
        $this->page = $this->page > 0 ? $this->page : 1;
        $this->pagesize = $this->pagesize > 0 ? $this->pagesize : 1;
        if ($this->pagesize > 20)
        {
            $this->pagesize = 20;
        }
        $pages = ceil($totalCount/$this->pagesize);
        if ($this->page > $pages && $pages != 0) {
            $this->page = $pages;
        }

        $data = $query->offset(($this->page -1) * $this->pagesize)->limit($this->pagesize)->asArray(true)->all();

        foreach ($data as $k=>$v)
        {
            $goods = Goods::find()
                ->where(['association_id'=>$v['courseid'], 'type'=>Goods::TYPE_COURSE, 'status'=>Goods::STATUS_DEFAULT])
                ->select(['goods_id'])
                ->one();
            $data[$k]['goods_id'] = !isset($goods['goods_id']) ?: $goods['goods_id'];
            $data[$k]['xueCourseNum'] = Myxuecourse::find()->where(['userid'=>$v['userid'], 'courseid'=>$v['courseid']])->count();
            $knowsId = Myxuecourse::find()
                ->where(['userid'=>$v['userid'], 'courseid'=>$v['courseid']])
                ->select(['knowsid'])
                ->orderBy(['create_at'=>SORT_DESC])
                ->asArray(true)
                ->one();
            if ($knowsId == null) {
                $knowsId = CourseSections::find()->where(['a.courseid' => $v['courseid']])->alias('a')
                    ->innerJoinWith(['courseBars as b'])
                    ->innerJoin('co_course_knows as c', '`b`.`barsid` = `c`.`barsid`')
                    ->orderBy(['a.order' => SORT_DESC, 'b.order' => SORT_DESC, 'c.order' => SORT_DESC])
                    ->asArray(true)
                    ->select(['c.knowsid'])->one();
            }
            $_knowsId = $knowsId['knowsid'];
            $data[$k]['learnKnows'] = $_knowsId;
        }
        return [
            'data'=>$data,
            'total'=>$totalCount,
            'currentPage'=>$this->page,
            'pageSize'=>$this->pagesize
        ];
    }
}