<?php

namespace frontend\models;

use Yii;
use yii\behaviors\TimestampBehavior;
/**
 * This is the model class for table "{{%organ}}".
 *
 * @property integer $id
 * @property string $url
 * @property string $userid
 * @property string $name
 * @property string $email
 * @property string $phone
 * @property string $phoneman
 * @property string $detail
 * @property integer $addtime
 * @property integer $status
 * @property string $organbook_img
 * @property integer $statementtype
 * @property string $info
 * @property string $headimg
 * @property string $category
 * @property integer $updatetime
 * @property integer $recommend_type
 */
class Organ extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%organ}}';
    }
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['userid', 'mobile', 'created_at', 'status', 'updated_at', 'usertype'], 'integer'],
            [['detail'], 'string'],
            [['name'], 'string', 'max' => 50],
            [['email', 'phoneman'], 'string', 'max' => 30],
            [['organbook_img', 'card_img','card_num'], 'string', 'max' => 100],
            [['info'], 'string', 'max' => 200],

            [[ 'card_img'], 'required'],
			[['phoneman'],'required'],
			
			['email', 'trim'],
//			['email', 'required'],
			['email', 'email'],
			['email', 'string', 'max' => 255],
//			['email', 'unique'],
			
			['userid', 'trim'],
			['userid', 'required'],
			//['userid', 'unique','message'=>'不能申请多个认证!'],
			
			['mobile', 'trim'],
//			['mobile', 'required'],
			['mobile','match','pattern'=>'/^[1][3578][0-9]{9}$/'],
			['mobile', 'string', 'max' => 13],
//			['mobile', 'unique'],
        ];
    }

    //userid,email,mobiel
    public function checkUnique($type="userid"){
        $isUserid=false;
        switch($type){
            case "userid":
                $errors["usertype"]="请不要重复申请同种类型的认证";
                $info=$this->userid;
                $isUserid=true;
                break;
            case "email":
                $errors["email"]="邮箱已被使用";
                $info=$this->email;
                break;
            case "mobile":
                $errors["mobile"]="电话号码已被使用";
                $info=$this->mobile;
                break;
            default:
                $errors["usertype"]="请不要重复申请同种类型的认证";
                $info=$this->userid;
                break;

        }
        $usertype=$this->usertype;
        if($isUserid) {
            if ($usertype == 1) {//个人认证
                $isUnique = static::findOne([$type => $info, 'usertype' => 1]) ? false : true;
            } else {
                $isUnique = static::findOne([$type => $info, 'usertype' => 2]) || static::findOne([$type => $info, 'usertype' => 3]) ? false : true;
            }
        }else{

                $msg = (new \yii\db\Query())->select(['*'])
                    ->from('co_organ')
                    ->where("$type = '$info' and userid!=".$this->userid)
                    ->all();
//                $msg=static::findOne([$type => $info, 'usertype' => 1,'userid'=>$this->userid]) ;
                $isUnique = $msg? false : true;
        }
        !$isUnique && $this->addErrors($errors);
        return $isUnique;
    }
//    public function save($runValidation = true, $attributeNames = null)
//    {
//        $checkUnique=$this->checkUnique("email") && $this->checkUnique("mobile");
//        if($this->isNewRecord){
//            $checkUnique = $checkUnique && $this->checkUnique();
//        }
//        if($checkUnique) {
//            return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
//        }else{
//            return false;
//        }
//    }

    public static function findByUserid($userid,$type='')
    {
//        return static::findOne(['username' => $username, 'status' = > self::STATUS_ACTIVE]);
        if($type==2 || $type==3){
            return static::findOne(['userid' => $userid,"usertype"=>2])?static::findOne(['userid' => $userid,"usertype"=>2]):static::findOne(['userid' => $userid,"usertype"=>3]);
        }else if($type==1){
            return static::findOne(['userid' => $userid,"usertype"=>1]);
        }
        return static::findOne(['userid' => $userid]);
    }
    public static function findByUseridExt($userid,$type='')
    {
        return static::findOne(['userid' => $userid,"usertype"=>$type]);
    }
    public static function getLevel($value=''){
        $level=[
            0=>"普通用户",
            1=>"实名认证用户",
            2=>"企业用户",
            3=>"教育用户",
        ];
        return isset($value)?$level[$value]:$level;
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'userid' => '用户Id',
            'name' => '认证名称',
            'email' => '邮箱',
            'mobile' => '电话',
            'phoneman' => '联系人',
            'detail' => '详细信息',
            'created_at' => '添加时间',
            'status' => '审核状态',
            'organbook_img' => '机构证书/寸照',
            'info' => '简介',
            'card_num' => '身份证号码',
            'card_img' => '身份证',
            'updated_at' => '更新时间',
            'usertype' => '用户类型',
        ];
    }
}
