<?php
namespace frontend\models;

use Yii;
use yii\base\Model;
use yii\base\NotSupportedException;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;

/**
 * User model
 *
 * @property integer $id
 * @property string $username
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property string $auth_key
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $password write-only password
 */
class Member extends ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_ACTIVE = 10;

//    public $username;
//    public $email;
    // public $password;
    public $roleName;
    public $role;
    static public $rules= [
        ['username', 'trim'],
        ['username', 'required'],
        ['username', 'unique'],
        ['username', 'string', 'min' => 4, 'max' => 20],
//        ['username','match','pattern'=>'/^[1][3578][0-9]{9}$/'],

        ['email', 'trim'],
        ['email', 'required'],
        ['email', 'email'],
        ['email', 'string', 'max' => 255],
        ['email', 'unique'],

        ['mobile', 'trim'],
        ['mobile', 'required'],
        ['mobile','match','pattern'=>'/^[1][3578][0-9]{9}$/'],
        ['mobile', 'string', 'max' => 11],
        ['mobile', 'unique'],

        ['password', 'required'],

        [['nickname',  'address', 'introduce','headimg','linkage','postcode'],'string'],

        [['nickname','lastdate','lastip','sex','password'],'safe'],

        ["headimg",'safe',"on"=>"headimg"]

//        ['sex','integer'],



//            ['status', 'default', 'value' => self::STATUS_ACTIVE],
//            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
    ];
//
//    public $isNewRecord;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%member}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return self::$rules;
    }
    public function delRules($attr,$value){
        foreach(self::$rules as $k => $val){
            if(in_array($attr,$val) && in_array($value,$val)){
                unset(self::$rules[$k]);
            }
        }
    }
    public function delRequired(){
        self::delRules('username', 'required');//取消required属性
        self::delRules('password', 'required');//取消required属性
        self::delRules('mobile', 'required');//取消required属性
        self::delRules('email', 'required');//取消required属性
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'username' => '用户名',
            'email' => '电子邮箱',
            'status' => '状态',
            'password' => '密码',
            'created_at' => '创建时间',
			'headimg'=>'头像',
			'linkage'=>'地址',
			'address'=>'详细地址',
			'mobile'=>'电话',
			'updated_at'=>'更新时间',
			'postcode'=>'邮编'
			// 'mobile'=>'',
        ];
    }


//    public function scenarios()
//    {
//        return [
//            'headimg' => ['headimg'],
//        ];
////        return parent::scenarios(); // TODO: Change the autogenerated stub
//    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id]);
//        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotSupportedException('"findIdentityByAccessToken" is not implemented.');
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
//        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
        return static::findOne(['username' => $username]);
    }
    public static function findByUserid($userid)
    {
//        return static::findOne(['username' => $username, 'status' => self::STATUS_ACTIVE]);
        return static::findOne(['id' => $userid]);
    }
    /**
     * Finds user by email
     *
     * @param string $username
     * @return static|null
     */
    public static function findByEmail($email,$active=true)
    {
        if($active) {
            return static::findOne(['email' => $email, 'status' => self::STATUS_ACTIVE]);
        }else {
            return static::findOne(['email' => $email]);
        }
    }
    public static function findByMobile($mobile)
    {
//        return static::findOne(['mobile'=>$mobile, 'status' => self::STATUS_ACTIVE]);
        return static::findOne(['mobile'=>$mobile]);
    }
    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'status' => self::STATUS_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return boolean
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int) substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }
    public function getUsername(){
        return $this->username;
    }
    public function setStatus(){
        $this->status=self::STATUS_ACTIVE;
    }
    public function getStatus(){
        return $this->status;
    }
    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
//        return $this->auth_key;
        return $this->encrypt;
    }
    public function setUsertype($usetype){
        $this->usertype = $usetype;
    }
    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return boolean if password provided is valid for current user
     */
    public function validatePassword($password)
    {
//        return Yii::$app->security->validatePassword($password, $this->password_hash);
//        return $this->password_hash==md5(md5($password).$this->encrypt);
        return $this->password==md5(md5($password).$this->encrypt);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
//        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
//        $this->password_hash=md5(md5($password).$this->encrypt);
        $this->password=md5(md5($password).$this->encrypt);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->encrypt = Yii::$app->security->generateRandomString(6);
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function save($runValidation = true, $attributeNames = null,$isPassword=true)
    {
        $len = strlen($this->password);
        if($len<6 || $len >16){
            $this->addErrors(["password"=>"密码应在6到16位之间"]);
        }

        if($this->password && $isPassword){
            $this->generateAuthKey();
            $this->setPassword($this->password);
        }
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }
}
