<?php


namespace frontend\controllers\api;

use Yii;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use common\models\UseLab;
use common\models\MyLab;
use common\models\Goods;
use common\models\Lab;

/**
 * OrganController implements the CRUD actions for Organ model.
 */
class UseLabController extends CurdController
{
    public $enableCsrfValidation = false;//关闭csrf验证
    public $orderField=[
        'id'  , 'userid' , 'order'  , 'inputtime', 'updatetime',
        //'videoPath', 'content', 'status'
    ];
    public $searchField=[
        'title'  , 'catid' , 'keywords'  , 'description', 'username','content'
        //'videoPath', 'content', 'status'
    ];
    public $modelName="UseLab";
    public $searchModelName="UseLabSearch";
    public $namespace="\\frontend\\models\\";
    public $action=['list',"view",'create','update','delete'];//允许的操作
    public $returnField=['*'];
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
//            'access' => [
//                'class' => AccessControl::className(),
//                'rules' => [
//                    [
//                        'actions' => ['list','view'],
//                        'allow' => true,
//                    ],
//                ],
//            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function  init(){
        parent::init();
       // $this->guestQuit();
        $this->getUid();
    }
    public function _list()
    {
        $UseLab = new UseLab();
        $params = json_decode(yii::$app->request->rawBody,true);
        $params['userid']=Yii::$app->user->id;

        $list = $UseLab::find()->where("userid = ".Yii::$app->user->id." and status>0")->asArray()->all();
        $lablist = array();
        //
        $mylab = new MyLab();
        foreach($list as $key=>$val){
            $mylabinfo = $mylab::find()
                ->where(['lab_id'=>$val['lab_id']])
                ->one();
            $lablist[$key]['lab_id'] = $mylabinfo['lab_id'];
            $lablist[$key]['lab_name'] = $mylabinfo['lab_name'];
            $lablist[$key]['begin_time'] = $mylabinfo['begin_time'];
            $lablist[$key]['end_time'] = $mylabinfo['end_time'];
            $goods = new goods();
            $goodsinfo = $goods::find()
                ->where(['goods_id'=>$mylabinfo['goods_id']])
                ->asArray()
                ->one();
            $lablist[$key]['goods_thumb'] = $goodsinfo['goods_thumb'];
            $lab = new Lab();
            $labinfo = $lab::find()
                ->where(['labid'=>$goodsinfo['association_id']])
                ->asArray()
                ->one();

            //$this->setReturn("0000","0000",$labinfo);
            if($labinfo['type']=="desktop"){
                $lablist[$key]['lab_url'] = \common\helpers\Encrypt::yungongchang(['use_url'=>yii::$app->params['api']['ygc']],Yii::$app->user->identity);
            }else{
                $lablist[$key]['lab_url'] = $mylabinfo['lab_url'];
            }
        }
        $this->setReturn('0000', 'success', $lablist);
        //parent::_list($SearchModel, $orderField, $searchField, $namespace); // TODO: Change the autogenerated stub
    }
    /*public function _list($SearchModel, $orderField, $searchField, $namespace = "\\frontend\\models\\")
    {
        $queryParams['userid']=Yii::$app->user->id;
        $this->queryParams['params']=json_encode($queryParams);
        parent::_list($SearchModel, $orderField, $searchField, $namespace); // TODO: Change the autogenerated stub
    }*/
    public function _View($model, $namespace = "\\common\\models\\", $checkUserNot = true)
    {
        parent::_View($model, $namespace,false); // TODO: Change the autogenerated stub
    }
    /**
     * Finds the Content model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return Content the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
//    protected function findContent($id)
//    {
//        return $this->findModel($id,true,"Content","\\backend\\models");
//    }
}