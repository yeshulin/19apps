<?php
/*作品管理*/
namespace backend\controllers;

use frontend\models\FormCollege;
use Yii;
use frontend\models\FormCollection;
use frontend\models\search\FormCollectionSearch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * CollectionController implements the CRUD actions for FormCollection model.
 */
class CollectionController extends Controller
{
    public $college;
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }
    public function beforeAction($action)
    {
        $colleges = new FormCollege();
        $datas = $colleges->find()->all();
        foreach ($datas as $k => $data) {
            $tmpCollege = $data->toArray();
            $this->college[$tmpCollege['id']] = $tmpCollege['name'];
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    /**
     * Lists all FormCollection models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new FormCollectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'college'=>$this->college
        ]);
    }

    public function actionPass($id)
    {
        $searchModel = new FormCollectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        $model = $this->findModel($id);
        if (!empty($model)) {
            $model->status = 1;
            $model->save();
        }
        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'college'=>$this->college
        ]);
    }

    /**
     * Displays a single FormCollection model.
     * @param string $id
     * @return mixed
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
            'college'=>$this->college
        ]);
    }

    public function actionSwfupload(){
        $catid = Yii::$app->request->get('catid');
        $vms_siteid = Yii::$app->params['vms_siteid'];
        $vms_url = Yii::$app->params['vms_url'];
        return $this->render('swfupload', [
//            'model' => $this->findModel($id),
//            'college'=>$this->college
            "vms_siteid"=>$vms_siteid,
            "vms_url"=>$vms_url,
            "catid"=>$catid
        ]);
        include template("video","swfupload");
    }

    /**
     * Creates a new FormCollection model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new FormCollection();
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->dataid]);
        } else {
            return $this->render('create', [
                'model' => $model,
                'college' => $this->college
            ]);
        }
    }

    /**
     * Updates an existing FormCollection model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param string $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('update', [
                'model' => $model,
                'college'=>$this->college
            ]);
        }
    }

    /**
     * Deletes an existing FormCollection model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param string $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the FormCollection model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param string $id
     * @return FormCollection the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = FormCollection::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
