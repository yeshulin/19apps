<?php

namespace backend\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "{{%link}}".
 *
 * @property integer $linkid
 * @property integer $linktype
 * @property string $name
 * @property string $url
 * @property string $logo
 * @property string $introduce
 * @property integer $order
 * @property integer $status
 * @property integer $linkcatid
 * @property string $create_at
 */
class Link extends \yii\db\ActiveRecord
{
    const STATUS_DEFAULT = 1; //正常
    const STATUS_NOT_DEFAULT = 0; //不显示

    const TYPE_TEXT = 1; //文字
    const TYPE_LOGO = 2; //LOGO

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%link}}';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['linktype', 'order', 'status', 'create_at', 'linkcatid'], 'integer'],
            [['linktype', 'status', 'name', 'url', 'linkcatid'], 'required'],
            [['introduce'], 'string'],
            [['name'], 'string', 'max' => 50],
            [['url'], 'url', 'defaultScheme' => 'http'],
            [['logo'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'linkid' => 'Linkid',
            'linktype' => '链接类型',
            'name' => '名称',
            'url' => '地址',
            'logo' => 'LOGO',
            'introduce' => '简介',
            'linkcatid' => '所属分类',
            'order' => '排序',
            'status' => '状态',
            'create_at' => '创建时间',
        ];
    }

    public static function getAllData()
    {
        $data = LinkCate::getCateData();
        $result = [];
        foreach ($data as $k => $v)
        {
            $model = self::find()->where(['linkcatid'=>$k, 'status'=>self::STATUS_DEFAULT])->orderBy(['order'=>SORT_DESC])->asArray(true)->all();
            foreach ($model as $mok => $mod)
            {
                $result[$k][$mok]['linkid'] = $mod['linkid'];
                $result[$k][$mok]['name'] = $mod['name'];
                if ($mod['linktype'] == self::TYPE_LOGO)
                {
                    $result[$k][$mok]['logo'] = $mod['logo'];
                }
                $result[$k][$mok]['url'] = $mod['url'];

                $result[$k][$mok]['introduce'] = $mod['introduce'];
            }
        }
        return $result;
    }


    public static function dropDown($column, $value = null)
    {
        $dropDownList = [
            'status' => [
                self::STATUS_DEFAULT => '正常',
                self::STATUS_NOT_DEFAULT => '隐藏',
            ],
            'linktype' => [
                self::TYPE_TEXT => '文字',
                self::TYPE_LOGO => 'LOGO',
            ],
            'linkcatid' => LinkCate::getCateData(),
        ];
        //根据具体值显示对应的值
        if ($value !== null) {
            return array_key_exists($column, $dropDownList) ? $dropDownList[$column][$value] : false;
        }

        //返回关联数组，用户下拉的filter实现
        else {
            return array_key_exists($column, $dropDownList) ? $dropDownList[$column] : false;
        }
    }

    public function save($runValidation = true, $attributeNames = null)
    {
        if (!$this->order)
        {
            $this->order = 0;
        }
        return parent::save($runValidation, $attributeNames); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['create_at'],
                ],
            ],
        ];
    }
}
